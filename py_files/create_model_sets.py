## Function to set up training and test data sets
##    80/20 train/test split. Randomized selection
##    ** This function also joins the feature data to the grades data, matched by CharacterDesignId
##    ** This function removes unlabeled crew before selecting data sets

## inputs: 
##    feats_data (python data frame with model features, generated by prep_model_features.py)
##    manual_grades (python data frame of 'known' grades, generated by get_manual_grades.py)
##    role_name (role to generate the data for -- Gunner, Shielder, Boarder, etc)
## outputs: AS NUMPY ARRAYS
##    train_features
##    train_labels
##    test_features
##    test_labels


# ----- Packages ------------------------------------------------------
import pandas as pd
import numpy as np


def main(feats_data, manual_grades, role_name, p = True):
    # ------------------------------------ make sure the role exists
    if role_name in ['Gunner', 'Shielder', 'Engineer', 'Pilot', 'Rusher', 'Antiboarder', 'Repairer', 'Boarder'] == False:
        print("That role doesn't exist. Make sure it's formatted correctly as one of the below")
        print(['Gunner', 'Shielder', 'Engineer', 'Pilot', 'Rusher', 'Antiboarder', 'Repairer', 'Boarder'])
        return False;
    
    
    # ------------------------------------ add grades to the feats data frame
    # for each character in the grades list, put the label in the "grade" column
    if p: print('Matching up grades with crew...')
    df = feats_data.copy()
    df['grade'] = None  # default is no grade
       
    for ind in range(len(manual_grades)):
        g = manual_grades[role_name + 'Input'].values[ind]
        # df.set_value(df.CharacterDesignId == manual_grades['CharacterDesignId'].values[ind], 'grade', g)
        df.at[df.CharacterDesignId == manual_grades['CharacterDesignId'].values[ind], 'grade'] = g
    
    # ------------------------------------ remove ungraded crew
    if p: print('Removing ungraded crew...')
    split_df = df[df.grade.isnull() == False]
    if p: 
        print("The size of the model-able data is:")
        print(split_df.shape)
    
    # ----------------------------------- randomly select an 80/20 train/test split
    # create a random arrangement of the data sets
    if p: print('Randomly selecting data sets...')
    np.random.seed(0)
    shuffle = np.random.permutation(np.arange(len(split_df['grade'].values)))

    features = split_df.drop(['CharacterDesignId', 'grade'], axis = 1).values[shuffle]
    labels = split_df['grade'].values[shuffle]

    n = len(shuffle)
    split_n = int(np.floor(0.8*n))

    train_features = features[0:split_n]
    train_labels = labels[0:split_n].astype(int)
    test_features = features[split_n+1:]
    test_labels = labels[split_n+1:].astype(int)

    if p: print('We will use ' + str(len(train_labels)) + ' training points and ' + str(len(test_labels)) + ' test points.')
    
    return train_features, train_labels, test_features, test_labels;
    
    
if __name__== "__main__":
    main()