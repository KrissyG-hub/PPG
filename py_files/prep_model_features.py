## Function to set up a crew data frame for modeling
##    Scales all numeric features to x = (x-xavg)/stdev. 
##    Creates binary variables for categorical data.
##    Removes unused columns

## inputs: crew_data (python data frame with all crew data, generated by get_crew_from_api.py)
## outputs: model_data  (dataframe of only model features & crewId)


# ----- Packages ------------------------------------------------------
import pandas as pd
import numpy as np
from sklearn.preprocessing import PolynomialFeatures


def main(crew_data):
    # ----------------------- Drop the columns that aren't needed for modeling
    feats_df = crew_data.drop(['Head', 'Body', 'Leg', 
                               'CharacterDesignDescription', 'CharacterDesignName'], axis=1)
    
    
    # ---------------------- Normalize ability scores PER ABILITY TYPE
    # (score-mean / stdev)

    # get a list of all of the abilities
    abilities = feats_df['SpecialAbilityType'].unique()
    # this df will hold the mean and stdev values, for calculating
    ability_stats_df = pd.DataFrame(columns=['AbilityType', 'm', 's'])

    # for each ability, calculate the mean and stdev
    for a in abilities:
        tempdf = feats_df[feats_df.SpecialAbilityType == a]
        stats = tempdf['SpecialAbilityFinalArgument']
        
        stats_entry = {'AbilityType': a, 'm': np.mean(stats), 's': np.std(stats)}
        ability_stats_df = ability_stats_df.append(stats_entry, ignore_index=True)
    
    # for each crew (row), set 'AbilityScore_norm' to (score-m)/s
    feats_df['AbilityScore_norm'] = 0.0
    print("Normalizing crews' ability scores...")
    for ind in (range(len(feats_df))):
        a = feats_df['SpecialAbilityType'].values[ind]
        score = feats_df['SpecialAbilityFinalArgument'].values[ind]
    
        mean=float(ability_stats_df[ability_stats_df.AbilityType==a].m)
        stdev=float(ability_stats_df[ability_stats_df.AbilityType==a].s)
    
        if stdev==0:  #divide by 0; manually set value to zero
            feats_df['AbilityScore_norm'].values[ind] = 0;
        else:
            feats_df['AbilityScore_norm'].values[ind] = (score-mean)/stdev    
           
    feats_df.drop(['SpecialAbilityFinalArgument'], axis=1, inplace=True)
            
    # --------------------------- Make categorical variables into dummy variables
    # make data frames for each categorical variable, with a column for each category
    # Race, Rarity, and AbilityType. Also collection, since the number doesn't have any ordered meaning
    
    print("Creating binary category variables...")
    race_cats = feats_df['RaceType'].str.get_dummies(sep=',')
    rarity_cats = feats_df['Rarity'].str.get_dummies(sep=',')
    abilitytype_cats = feats_df['SpecialAbilityType'].str.get_dummies(sep=',')

    feats_df['CollectionDesignId'] = feats_df['CollectionDesignId'].astype(str)
    collection_cats = feats_df['CollectionDesignId'].str.get_dummies(sep=',')

    # join these data frames into the main one
    feats_df_binarized = feats_df.join([race_cats,rarity_cats,abilitytype_cats,collection_cats])
    
    # drop the features we just dumm-ified
    feats_df_binarized.drop(['RaceType', 'Rarity', 'SpecialAbilityType', 'CollectionDesignId'], axis=1, inplace=True)
    
    # -------------------------- Scale numerical variables by (x-xbar)/stdev
    print("Scaling numeric variables...")
    vars = ['FinalHp', 'FinalPilot', 'FinalAttack', 'FinalRepair', 'FinalWeapon', 'FinalScience', 'FinalEngine', 'FireResistance', 
            'WalkingSpeed', 'RunSpeed', 'TrainingCapacity']
    model_data = feats_df_binarized.copy()
    
    for v in vars:
        data = model_data[v]
    
        m = np.mean(data)
        s = np.std(data)
        
        if s != 0:  # divide by zero error
            model_data[v] = (data-m)/s

    
    # -------------------------- HACK: drop some features i'm just not ready to model right now
    model_data.drop(['Flags', 'EquipmentMask'], axis=1, inplace=True)
    model_data.drop(['0', '1', '13', '14', '15', '16', '2', '3', '4', '5', '6', '7', '8', '9'], axis = 1, inplace=True)
    model_data.drop(['Alien', 'Asian', 'Animal', 'Black', 'Robot', 'Unknown', 'White'], axis = 1, inplace=True)
    model_data.drop(['Common', 'Elite', 'Epic', 'Hero', 'Legendary', 'Special', 'Unique'], axis = 1, inplace=True)
    
    
    # -------------------------- Add interaction terms
    # poly = PolynomialFeatures(degree=2, interaction_only=True, include_bias=False)
    # poly_model_data = poly.fit_transform(model_data)  
    poly_model_data = model_data.copy()
    
    # ------- interaction between skill type and score
    for skill in ['AddReload', 'DamageToCurrentEnemy', 'DamageToRoom', 'DamageToSameRoomCharacters', 'DeductReload', 'FireWalk', 
                  'Freeze', 'HealRoomHp', 'HealSameRoomCharacters', 'HealSelfHp', 'SetFire']:
        poly_model_data[skill+'Xscore'] = model_data[skill]*model_data['AbilityScore_norm']
    for item in ['FireResistance', 'TrainingCapacity', 'AddReload', 'DamageToCurrentEnemy', 'DamageToRoom', 
                'DamageToSameRoomCharacters', 'DeductReload', 'FireWalk', 'Freeze', 'HealRoomHp', 'HealSameRoomCharacters', 
                'HealSelfHp', 'SetFire']:
        poly_model_data[item+'Xhp'] = model_data[item]*model_data['FinalHp']
    poly_model_data['AbilityScore_squared'] = model_data['AbilityScore_norm']*model_data['AbilityScore_norm']
    
    print("Ready for modeling!")
    return poly_model_data;   



if __name__== "__main__":
    main()







